using Azure;
using Azure.Search.Documents.Models;
using hackaton_microsoft_agro.Interface;
using static System.Net.Mime.MediaTypeNames;

namespace hackaton_microsoft_agro.Services
{
    public class Orchestrator(ContentSafety contentSafety,
                              CustomVision customVision,
                              AISearch aISearch,
                              OpenAIService openAI) : IOrchestrator
    {

        const string Observation = """"
            The recommendation can only be made by a qualified professional. An agronomic prescription must be issued. The information is researched and the response generated by generative AI and it is necessary to verify at the source whether the information is accurate.
            """";

        public Dictionary<string, string> ProcessRequest(string? text, byte[]? image)
        {
            string query;
            string? pestClassification = null;

            contentSafety.ValidateContent(image, text);

            if (text == null)
            {
                (pestClassification, query) = AnalyseImage(image);

                if (string.IsNullOrEmpty(query))
                    return CreateResponse(pestClassification, "Unidentified pest");
            }
            else
            {
                query = text;
            }

            var response = GetAISearchResponse(query);

            return CreateResponse(pestClassification, response);
        }

        public (string pest, string query) AnalyseImage(byte[]? image)
        {
            string query = "";

            if (image == null)
                throw new ArgumentException("Image data is invalid.");

            (string pest, double confidence) = customVision.AnalyseImageContent(image);

            if (confidence >= 0.75)
                query = $"Suggest control for {pest}";
            else
                pest = "Unidentified";

            return (pest: pest, query: query);
        }

        private string GetAISearchResponse(string query)
        {
            var searchResults = aISearch.Search(query, 5);
            return openAI.ProcessResponse(query, string.Join(" ", searchResults));
        }

        private Dictionary<string, string> CreateResponse(string? pestResult, string response)
        {
            var result = new Dictionary<string, string>
            {
                ["result"] = response,
                ["observation"] = Observation
            };

            if (pestResult != null)
            {
                result["pestClassification"] = pestResult;
            }

            return result;
        }
    }
}
