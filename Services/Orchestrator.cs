using Azure;
using Azure.Search.Documents.Models;
using hackaton_microsoft_agro.Interface;
using static System.Net.Mime.MediaTypeNames;

namespace hackaton_microsoft_agro.Services
{
    public class Orchestrator(ContentSafety contentSafety,
                              CustomVision customVision,
                              AISearch aISearch,
                              OpenAIService openAI) : IOrchestrator
    {

        const string Observation = """"
            The recommendation can only be made by a qualified professional. An agronomic prescription must be issued. The information is researched and the response generated by generative AI and it is necessary to verify at the source whether the information is accurate.
            """";

        public Dictionary<string, string> ProcessRequest(string? text, byte[]? image)
        {

            ValidateContent(image, text);

            if (contentSafety.ContentAnalyze(image, text))
                throw new ArgumentException("Text or image contains inappropriate content.");

            string query;
            string? pestResult = null;

            if (image != null)
            {
                var (pest, confidence) = AnalyseImage(image);
                pestResult = confidence >= 0.75 ? pest : "Unidentified";
                query = $"Suggest control for {pest}";
            }
            else
            {
                query = $"Suggest control for {text}";
                pestResult = text;
            }

            var response = GetAISearchResponse(query, query);

            return CreateResponse(pestResult, response);
        }


        private void ValidateContent(byte[]? image, string? text)
        {
            if (contentSafety.ContentAnalyze(image, text))
            {
                throw new ArgumentException("Text or image contains inappropriate content.");
            }
        }

        private string GetAISearchResponse(string context, string query)
        {
            var searchResults = aISearch.Search(query, 5);
            return openAI.ProcessResponse(context, string.Join(" ", searchResults));
        }

        private (string pest, double confidence) AnalyseImage(byte[] image)
        {
            if (image == null)
            {
                return ("Unidentified", 0);
            }

            return customVision.AnalyseImage(image);
        }

        private Dictionary<string, string> CreateResponse(string? pestResult, string response)
        {
            var result = new Dictionary<string, string>
            {
                ["result"] = response,
                ["observation"] = Observation
            };

            if (pestResult != null)
            {
                result["pestClassification"] = pestResult;
            }

            return result;
        }
    }
}
